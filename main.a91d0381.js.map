{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageLose","messageWin","scoreBoard","tableCells","querySelectorAll","tableSize","score","scoreBuffer","keyCode","left","up","right","down","gameTable","fullTable","zeroCounter","flat","filter","el","length","random","rowIndex","Math","floor","columnIndex","cleanTable","forEach","classList","remove","textContent","row","cell","i","mergeTiles","newRow","filteredRow","val","currentCell","shift","nextCell","push","moveTile","direction","nextGameTable","merged","j","reverse","arr","lastMove","addScore","reduce","sum","curr","makeAction","start","add","connectHtml","addEventListener","startGame","cellsContent","text","className","endGame","res","removeEventListener","e","includes"],"mappings":"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","file":"main.a91d0381.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst scoreBoard = document.querySelector('.game-score');\nconst tableCells = document.querySelectorAll('td');\nconst tableSize = 4;\nlet score = 0;\nlet scoreBuffer = [];\n\nconst keyCode = {\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n};\n\nlet gameTable = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction fullTable() {\n  const zeroCounter = gameTable.flat().filter(el => el === 0).length;\n\n  if (zeroCounter > 0) {\n    return false;\n  }\n}\n\nfunction random() {\n  while (!fullTable()) {\n    const rowIndex = Math.floor(Math.random() * 4);\n    const columnIndex = Math.floor(Math.random() * 4);\n\n    if (gameTable[rowIndex][columnIndex] === 0) {\n      gameTable[rowIndex][columnIndex] = (Math.random() >= 0.5) ? 4 : 2;\n      break;\n    }\n  }\n}\n\nfunction cleanTable() {\n  tableCells.forEach(el => {\n    el.classList.remove(`field-cell--${el.textContent}`);\n    el.textContent = '';\n  });\n\n  gameTable.forEach((row) => {\n    row.forEach((cell, i) => {\n      row[i] = 0;\n    });\n  });\n}\n\nfunction mergeTiles(row) {\n  const newRow = [];\n  const filteredRow = row.filter(val => val > 0);\n  let currentCell = filteredRow.shift();\n\n  if (!currentCell) {\n    return;\n  }\n\n  for (let i = 0; i < tableSize; i++) {\n    const nextCell = filteredRow.shift();\n\n    if (!nextCell) {\n      if (currentCell) {\n        newRow.push(currentCell);\n      }\n      break;\n    } else if (currentCell === nextCell) {\n      newRow.push(currentCell + nextCell);\n      scoreBuffer.push(currentCell + nextCell);\n      currentCell = null;\n    } else {\n      if (currentCell) {\n        newRow.push(currentCell);\n      }\n      currentCell = nextCell;\n    }\n  }\n\n  return newRow;\n}\n\nfunction moveTile(direction) {\n  const nextGameTable = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  switch (direction) {\n    case keyCode.left:\n      for (let i = 0; i < tableSize; i++) {\n        const merged = mergeTiles(gameTable[i]);\n\n        if (merged) {\n          for (let j = 0; j < merged.length; j++) {\n            nextGameTable[i][j] = merged[j];\n          }\n        }\n      }\n      break;\n\n    case keyCode.right:\n      for (let i = 0; i < tableSize; i++) {\n        const merged = mergeTiles(gameTable[i].reverse());\n\n        if (merged) {\n          for (let j = 0; j < merged.length; j++) {\n            nextGameTable[i][tableSize - j - 1] = merged[j];\n          }\n        }\n      }\n      break;\n\n    case keyCode.up:\n      for (let i = 0; i < tableSize; i++) {\n        const arr = [];\n\n        for (let j = 0; j < tableSize; j++) {\n          arr.push(gameTable[j][i]);\n        }\n\n        const merged = mergeTiles(arr);\n\n        if (merged) {\n          for (let j = 0; j < merged.length; j++) {\n            nextGameTable[j][i] = merged[j];\n          }\n        }\n      }\n      break;\n\n    case keyCode.down:\n      for (let i = 0; i < tableSize; i++) {\n        const arr = [];\n\n        for (let j = 0; j < tableSize; j++) {\n          arr.push(gameTable[tableSize - j - 1][i]);\n        }\n\n        const merged = mergeTiles(arr);\n\n        if (merged) {\n          for (let j = 0; j < merged.length; j++) {\n            nextGameTable[tableSize - j - 1][i] = merged[j];\n          }\n        }\n      }\n      break;\n\n    default:\n      break;\n  }\n\n  return nextGameTable;\n}\n\nfunction lastMove() {\n  if (`${gameTable}` !== `${moveTile(keyCode.up)}`\n  || `${gameTable}` !== `${moveTile(keyCode.down)}`\n  || `${gameTable}` !== `${moveTile(keyCode.left)}`\n  || `${gameTable}` !== `${moveTile(keyCode.right)}`) {\n    return true;\n  }\n}\n\nfunction addScore() {\n  if (scoreBuffer.length > 0) {\n    score += scoreBuffer.reduce((sum, curr) => sum + curr);\n    scoreBoard.textContent = !score ? 0 : score;\n  }\n}\n\nfunction makeAction(direction) {\n  scoreBuffer = [];\n\n  const nextGameTable = moveTile(direction);\n\n  if (`${gameTable}` === `${nextGameTable}`) {\n    return false;\n  }\n\n  gameTable = nextGameTable;\n\n  return true;\n}\n\nfunction start() {\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  scoreBoard.textContent = '0';\n  score = 0;\n  cleanTable();\n  random();\n  random();\n  connectHtml();\n  document.addEventListener('keydown', startGame);\n}\n\nfunction connectHtml() {\n  const cellsContent = [];\n\n  gameTable.forEach((row) => {\n    row.forEach((cell) => {\n      cellsContent.push(cell);\n    });\n  });\n\n  tableCells.forEach((cell) => {\n    const text = cellsContent.shift();\n\n    cell.textContent = !text ? null : text;\n    cell.className = 'field-cell';\n    cell.classList.add(`field-cell--${cell.textContent}`);\n  });\n}\n\nfunction endGame(res) {\n  if (res) {\n    messageWin.classList.remove('hidden');\n  } else {\n    messageLose.classList.remove('hidden');\n  }\n  document.removeEventListener('keydown', startGame);\n}\n\nfunction startGame(e) {\n  if (e.keyCode < 36 || e.keyCode > 41) {\n    return;\n  }\n\n  if (makeAction(e.keyCode)) {\n    if (scoreBuffer.includes(2048)) {\n      endGame(true);\n    }\n\n    addScore();\n    random();\n\n    if (!fullTable() && !lastMove()) {\n      endGame(false);\n    }\n\n    scoreBuffer = [];\n    connectHtml();\n  }\n}\n\nbutton.addEventListener('click', start);\n"]}